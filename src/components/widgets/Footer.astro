---
import { Icon } from 'astro-icon/components';
import { SITE } from 'astrowind:config';
import type { CallToAction } from '~/types';
import { getHomePermalink } from '~/utils/permalinks';
import Button from '../ui/Button.astro';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

export interface Props {
  descriptions: Array<string>;
  secondaryLinks: Array<Link>;
  socialLinks: Array<Link>;
  footNote?: string;
  actions?: Array<CallToAction>;
  theme?: string;
}

const {
  socialLinks = [],
  secondaryLinks = [],
  descriptions = [],
  footNote = '',
  actions = await Astro.slots.render('actions'),
  theme = 'light',
} = Astro.props;
---

<footer class:list={[{ dark: theme === 'dark' }, 'relative border-t border-gray-200 dark:border-slate-800 not-prose']}>
  <div class="dark:bg-dark absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div
    class="relative max-w-7xl mx-auto px-4 sm:px-6 dark:text-slate-300 intersect-once intersect-quarter intercept-no-queue motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
  >
    <div
      class="md:flex md:items-center md:justify-between gap-4 gap-y-8 sm:gap-8 pt-8 md:pt-12 text-center md:text-left"
    >
      <div>
        <div class="mb-2">
          <a class="inline-block font-bold text-xl" href={getHomePermalink()}>{SITE?.legalName}</a>
        </div>
        <div class="text-sm text-muted">
          {descriptions.map((description) => <div class="mb-2 text-sm text-muted" set:html={description} />)}
        </div>
      </div>
      <div>
        {
          actions && (
            <div class="max-w-xs m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <div class="flex w-full">
                    <Button {...(action || {})} class="w-full" />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )
        }
      </div>
    </div>
    <div class="md:flex md:items-center md:justify-between py-6 md:py-8">
      {
        socialLinks?.length ? (
          <ul class="flex justify-center mb-4 md:order-1 -ml-2 md:ml-4 md:mb-0 rtl:ml-0 rtl:-mr-2 rtl:md:ml-0 rtl:md:mr-4">
            {socialLinks.map(({ ariaLabel, href, text, icon }) => (
              <li>
                <a
                  class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                  aria-label={ariaLabel}
                  href={href}
                >
                  {icon && <Icon name={icon} class="w-5 h-5" />}
                  <Fragment set:html={text} />
                </a>
              </li>
            ))}
          </ul>
        ) : (
          ''
        )
      }

      <div class="text-xs mr-4 text-muted">
        <div class="flex flex-col md:flex-row">
          <div class="md:pr-8 text-center">
            <Fragment set:html={footNote} />
          </div>

          <div class="flex gap-1 justify-center">
            {
              secondaryLinks.map(({ text, href }, index) => (
                <>
                  {index !== 0 ? ' Â· ' : ''}
                  <a
                    class="text-muted hover:text-gray-700 dark:text-gray-400 hover:underline transition duration-150 ease-in-out"
                    href={href}
                    set:html={text}
                  />
                </>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</footer>
